# -*- coding: utf-8 -*-
"""Istomina_PythonUrban_lab_2.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U67Lbv-BUTMZjIAUB-y6iE6jTZaoJet7

###Лабораторная №2
Истомина Людмила

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# собрать установку всех необходимых модулей в одном месте
!pip install geopandas 
!pip install mapclassify  # необходимо для визуализации
!pip install osmnx  # устанавливаем модуль osmnx

# собрать импорты всех модулей в одном месте
import pandas as pd
import geopandas as gpd
import osmnx as ox

TILES = "CartoDB positron"  # Название подложки для карт

# указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "Василеостровский район, Санкт-Петербург"  # название территории для которой будут строиться слои
TERRITORY_OSM_ID = "R1114252"
# указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/
KGIOP_FILE_URL = "https://raw.githubusercontent.com/ludaist/PythonUrbanITMO_LIstom/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiop_objects.geojson"  # ссылка на слой с объектами культурного наследия
STREETS_FILE_URL = "https://raw.githubusercontent.com/ludaist/PythonUrbanITMO_LIstom/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/streets.geojson"  # ссылка на слой с улицами

"""## Территория

### Загрузка территории из OSM (Extract)
"""

# загрузить geodataframe с геометрией для территории TERRITORY_NAME
district = ox.geocode_to_gdf([TERRITORY_OSM_ID], by_osmid=True)
district.explore(tiles=TILES)

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

# отфильтровать улицы по маске геометрии территории полученной ранее
street = gpd.read_file(STREETS_FILE_URL, mask=district)
street.explore(tiles=TILES)

"""### Обработка данных с улицами (Transform)"""

# проверить слой с улицами на уникальность
street.info()

street["name"].is_unique

street.head()

street[street["geometry"].duplicated(keep=False)]  # датафрейм с дублирующимися значениями в столбце "geometry"

#переименовать столбцы в русские названия 

rename_columns_street = {
    "name": "наименование",
}
street.rename(columns=rename_columns_street, inplace=True)

# TODO для того чтобы переименовать индекс, нужно обратиться к нему и вызвать от него метод rename (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.rename.html)

street.head()

# добавить столбец "линия" и заполнить его true, если улица имеет в поле "name" слова "линия" и "линии"
street["это_линия"] = False
street.loc[street["наименование"].str.contains("линия"), ["это_линия"]] = True
street.loc[street["наименование"].str.contains("линии"), ["это_линия"]] = True
street.head()

#сгруппировать и объединить геометрии с одинаковыми названиями
street = street.dissolve(by="наименование")
street.head()

"""### Сохранение слоя с улицами (Load)"""

# сохранить слой в географической проекции в формате GeoJSON
street.to_crs(4326).to_file('union_streets.geojson', driver='GeoJSON')

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

# отфильтровать ОКН (объекты культурного наследия) по маске геометрии территории полученной ранее
okn = gpd.read_file(KGIOP_FILE_URL, mask=district)
okn.explore(tiles=TILES)

"""### Обработка объектов культурного наследия (Transform)"""

okn.info()

okn["object_name"].is_unique

okn.head()

okn["object_type"].unique()

okn.crs

# добавить два столбца lon и lat, в которых будут долгота и широта 

okn["lon"] = okn.to_crs(3857).geometry.centroid.to_crs(4326).x
okn["lat"] = okn.to_crs(3857).geometry.centroid.to_crs(4326).y
okn.head()

"""### Сохранение слоя с объектами культурного наследия (Load)"""

# переименовать столбцы в русские названия, кроме столбца geometry

rename_columns = {
    "ensemble_name": "наименование_ансамбля",
    "object_name": "наименование_объекта",
    "occurrence_time": "дата_создания",
    "object_location": "местоположение",
    "historical_category": "историческая_категория",
    "normative_act": "нормативный_акт",
    "object_type": "тип_объекта"
}
okn.rename(columns=rename_columns, inplace=True)
okn.head()

# добавить столбец "на_линии" и заполнить его true, если ОКН имеет в поле "местоположение" слово "линия"
okn["на_линии"] = False
okn.loc[okn["местоположение"].str.contains("линия"), ['на_линии']] = True
okn.head()

# сохранить слой в географической проекции в формате GeoJSON
okn.to_crs(4326).to_file('okn.geojson', driver='GeoJSON')

"""Карта улиц Васильевского острова, классифицированных по наличию в их названии слова "линия"

https://kepler.gl/demo/map?mapUrl=https://dl.dropboxusercontent.com/s/kmptues14upfuuj/keplergl_w7w6z6s.json

Карта объектов культурного наследия, классифицированных по местоположению на линиях и вне линий Васильевского острова https://kepler.gl/demo/map?mapUrl=https://dl.dropboxusercontent.com/s/ci5we99v8takrnf/keplergl_1hc5g6a.json

Карта концентрации объектов культурного наследия на территории Васильевского острова

https://kepler.gl/demo/map?mapUrl=https://dl.dropboxusercontent.com/s/k1y0oztjikix7sn/keplergl_d9utf0p.json

Карта объектов культурного наследия, классифицированных по типу (ансамбль/памятник) 

https://kepler.gl/demo/map?mapUrl=https://dl.dropboxusercontent.com/s/n1ld6951fxid5fw/keplergl_pfrdl1n.json

загрузить слои в репозиторий

загрузить в kepler.gl улицы и ОКН

визуализировать по своему усмотрению

сохранить файл с рисунком, html-ссылку

загрузить результат в репозиторий на гитхаб
"""