# -*- coding: utf-8 -*-
"""Istomina_PythonUrban_lab_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17UQsV-N8f5OelLJLJsaSQbXAIjfqBjUq

## list comprehension

### Обработка каждого элемента
"""

cart = [3, 4, 12, 17, 19, 21, 23, 26, 30]

cashier = []  # новый список с помощью метода append
for item in cart:
    cashier.append(item)
print(cashier)

cashier = [item for item in cart]
print(cashier)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-1.png)

### Фильтрация элементов
"""

cart = [5, 7, 9, 10, 12, 15, 19, 20, 22]

cashier_3 = []
for item in cart:
    if item % 2 == 0:  # только четные
        cashier_3.append(item)
print(cashier_3)

cashier_3 = [item for item in cart if item % 2 == 0]
print(cashier_3)

"""![](https://github.com/mrdbourke/python-list-comprehensions-tutorial/raw/f68f956c745932e1b824a69994706d715adde0a1/images/list-comprehensions-2.png)

## Задачи

##### ***Задача 1. Сделать название городов с заглавной буквы.***
Написать функцию task_1, которая будет принимать список названий городов, а возвращать новый список, в котором в каждой строке первая буква будет заглавной, а все остальные строчные.

**None-list comprehension**
"""

list_cities = ["москва", "иЖЕВСк", "Владивосток", "новосибирсК", "мУРМАНСК"]

...  # написать функцию task_1
def task_1 (cap_list_cities):
    for i in range(len(cap_list_cities)):
        cap_list_cities [i] = cap_list_cities[i].capitalize()
    return cap_list_cities

new_list_cities = task_1(list_cities)  # вызвать функцию и получить новый результат исходного списка list_cities

print(new_list_cities)  # ['Москва', 'Ижевск', 'Владивосток', 'Новосибирск', 'Мурманск']

"""**List comprehension**"""

list_cities = ["москва", "иЖЕВСк", "Владивосток", "новосибирсК", "мУРМАНСК"]

...  # написать функцию task_1
def task_1 (cap_list_cities):
    cap_list_cities = [cap_list_cities[i].capitalize() for i in range(len(cap_list_cities))]
    return cap_list_cities

new_list_cities = task_1(list_cities)  # вызвать функцию и получить новый результат исходного списка list_cities

print(new_list_cities)  # ['Москва', 'Ижевск', 'Владивосток', 'Новосибирск', 'Мурманск']

"""##### ***Задача 2. Отфильтровать города с населением больше 1 млн. человек.***

Написать функцию task_2, которая будет принимать два аргумента список городов и численность населения.  
Функция должна возвращать новый отфильтрованный список городов, где остались города только с население больше 1 млн. человек

**None-list comprehension**
"""

list_dict_cities = [
    {
        "name": "Москва",
        "population": 12 * 10 ** 6,
    },
    {
        "name": "Санкт-Петербург",
        "population": 5 * 10 ** 6,
    },
    {
        "name": "Ижевск",
        "population": 0.6 * 10 ** 6,
    },
]

filter_population = 10 ** 6

...  # написать функцию task_2
def task_2 (mill_cities, pop_city):
    new_list = []
    for city_pop in mill_cities:
        if city_pop['population'] >= pop_city:
            new_list.append(city_pop)
    return new_list

new_list_dict_cities = task_2(list_dict_cities,filter_population)  # вызвать функцию и передать в неё значения list_dict_cities и filter_population

print(new_list_dict_cities)  # [{'name': 'Москва', 'population': 12000000}, {'name': 'Санкт-Петербург', 'population': 5000000}]

"""**List comprehension**"""

list_dict_cities = [
    {
        "name": "Москва",
        "population": 12 * 10 ** 6,
    },
    {
        "name": "Санкт-Петербург",
        "population": 5 * 10 ** 6,
    },
    {
        "name": "Ижевск",
        "population": 0.6 * 10 ** 6,
    },
]

filter_population = 10 ** 6

...  # написать функцию task_2
def task_2 (mill_cities, pop_city):
    new_list = []
    new_list = [city_pop for city_pop in mill_cities if city_pop['population'] >= pop_city]
    return new_list

# вызвать функцию и передать в неё значения list_dict_cities и filter_population
new_list_dict_cities = task_2(list_dict_cities,filter_population)  

print(new_list_dict_cities)  # [{'name': 'Москва', 'population': 12000000}, {'name': 'Санкт-Петербург', 'population': 5000000}]

"""##### ***Задача 3. Найти общие города среди двух групп и отсортировать их в алфавитном порядке.***

Написать функцию task_3, которая будет принимать 2 списка городов, а возвращать новый список, в котором будут города, которые есть в двух группах.  
Результат функции должен быть отсортирован в алфавитном порядке. 

"""

fisrt_group = ["Москва", 'Владивосток', "Санкт-Петербург"]
second_group = ['Новосибирск', "Ижевск", "Санкт-Петербург", "Москва"]

...  # Написать функцию task_3
def task_3(f_group,s_group):
    first_group_set=set(f_group)
    second_group_set=set(s_group)
    com_cities = first_group_set.intersection(second_group_set)
    com_cities_list = list(com_cities)
    com_cities_list.sort()
    return com_cities_list

# вызвать функцию и передать в неё значения fisrt_group и second_group
common_cities = task_3(fisrt_group,second_group)  

print(common_cities)  # ['Санкт-Петербург', 'Москва']

"""##### ***Задача 4. Найти количество упоминаний заданного города.***

У списка есть метод `count`, этот метод принимает значение,  
и считает сколько раз он содержится в списке.  

Написать функцию `task_4`, которая принимает два аргумента список городов,  
где нужно искать заданный город.  
И искомый город, количество упоминаний которого нужно подсчитать.
Результатом должно быть количество вхождений города в списке.

Города записанные в разных регистрах, считаются одинаковыми.
"""

list_cities = [  # список городов
    'Новосибирск',
    'Владивосток',
    'Москва',
    'санкт-петербург',
    'Владивосток',
    'Москва',
    'Санкт-Петербург',
    'Москва',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Владивосток',
    'Ижевск',
    'САНКТ-ПЕТЕРБУРГ',
    'Владивосток',
    'Новосибирск',
    'Владивосток',
    'Ижевск',
    'Москва',
    'Санкт-Петербург'
]
find_city = 'Санкт-Петербург'  # искомый город

# написать функцию task_4
def task_4(l_cities,f_city):
    upp_find_city= f_city.upper()
    upp_list_cities = [l_cities[i].upper() for i in range(len(l_cities))]
    c_cities=upp_list_cities.count(upp_find_city)
    return c_cities

# вызвать функцию и передать в неё значения list_cities и find_city
count_cities = task_4(list_cities,find_city) 

print(count_cities)  # 4

"""##### ***Задача 5. Средний индекс озеленения.***

Дан список словарей территорий, где `territory_area` - площадь территории, а `green_zones` список площадей зеленых зон.  
Написать две функции:
- первая будет принимать исходный список городов, и возвращать новый список словарей, в котором для каждой территории посчитан индекс индекс озеленения, как отношение площади зеленых зон к площади территории. Новые словари в списке должен содержать название территории и её индекс озеленения. 
- вторая функция принимает список словарей, в которых посчитаны индексы озеленения для каждой территории и возвращает средний индекс озеленения по всем территориям. 
"""

list_territories = [
    {
        "territory_name": "Пушкин",
        "territory_area": 28676,
        "green_zones": [302, 487, 420, 325, 471, 363, 404]
    },
    {
        "territory_name": "Павловск",
        "territory_area": 21025,
        "green_zones": [360, 375, 223, 258, 345, 296, 303]
    },
    {
        "territory_name": "Петергоф",
        "territory_area": 44274,
        "green_zones": [364, 447, 438, 223, 336, 431, 442]
    },
]

# написать функцию, которая будет высчитывать индексы озеленения для каждой территории

new_list_territories = { 0: { }, 1: { }, 2: { }}
n_list_territories = { 0: { }, 1: { }, 2: { }}

def task_5_1(l_territories):

    for i in range(len(l_territories)):
        gr_i=sum(l_territories[i]["green_zones"])/l_territories[i]["territory_area"]
        gr_n=l_territories[i]["territory_name"]
    
        n_list_territories[i]["territory_name"] = gr_n 
        n_list_territories[i]["green_index"] = gr_i
        
    return n_list_territories

new_list_territories = task_5_1(list_territories)

# написать функцию, которая будет высчитывать средний индекс озеленения по всем территориям
def task_5_2(n_l_territories):
    sum_gi=0
    avg_gi=0
    for i in range(len(n_l_territories)):
        sum_gi += n_l_territories[i]["green_index"]

    avg_gi=sum_gi/len(n_l_territories)
    return avg_gi

avg_green_index = task_5_2(new_list_territories)

# распечатать результат округленный до 4 знаков после запятой

for i in range(len(new_list_territories)):
    t_n=new_list_territories[i]["territory_name"]
    g_i=new_list_territories[i]["green_index"]
    print (f"индекс озеленения территории города {t_n} = {round(g_i,4)}")

print (f"средний индекс озеленения по всем территориям = {round(avg_green_index,4)} ")